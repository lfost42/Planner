// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SoftwarePlannerLibrary.DataAccess;

namespace SoftwarePlannerLibrary.Data.Migrations
{
    [DbContext(typeof(PlannerContext))]
    partial class PlannerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.AlertModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<string>("RecipientId")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("NoteId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.ChangeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentValue")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PreviousValue")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ProjectModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequirementModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamModelId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketModelId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedItem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("ProjectModelId");

                    b.HasIndex("RequirementModelId");

                    b.HasIndex("TaskModelId");

                    b.HasIndex("TeamModelId");

                    b.HasIndex("TicketModelId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.CreatorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("UserModelId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("bytea");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequirementModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketModelId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ProjectModelId");

                    b.HasIndex("RequirementModelId");

                    b.HasIndex("TaskModelId");

                    b.HasIndex("TeamModelId");

                    b.HasIndex("TicketModelId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.NoteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedUserlId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("PriorityModelId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectModelId")
                        .HasColumnType("integer");

                    b.Property<int>("RequirementModelId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusModelId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskModelId")
                        .HasColumnType("integer");

                    b.Property<string>("TeamModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TeamModelId1")
                        .HasColumnType("integer");

                    b.Property<int>("TicketModelId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("PriorityModelId");

                    b.HasIndex("ProjectModelId");

                    b.HasIndex("RequirementModelId");

                    b.HasIndex("StatusModelId");

                    b.HasIndex("TaskModelId");

                    b.HasIndex("TeamModelId1");

                    b.HasIndex("TicketModelId");

                    b.HasIndex("TypeModelId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.PriorityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PriorityLevel")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.ProjectModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedUserlId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ChangeModelId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ClosedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("PriorityModelId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<int>("StatusModelId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("ChangeModelId");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PriorityModelId");

                    b.HasIndex("StatusModelId");

                    b.HasIndex("TeamModelId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.RequirementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedUserlId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ClosedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("PriorityModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectModelId")
                        .HasColumnType("integer");

                    b.Property<string>("RequirementName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusModelId")
                        .HasColumnType("integer");

                    b.Property<string>("TeamModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TeamModelId1")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PriorityModelId");

                    b.HasIndex("ProjectModelId");

                    b.HasIndex("StatusModelId");

                    b.HasIndex("TeamModelId1");

                    b.HasIndex("TypeModelId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.StatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.TaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedUserlId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ClosedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("PriorityModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequirementModelId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusModelId")
                        .HasColumnType("integer");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeamModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TeamModelId1")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PriorityModelId");

                    b.HasIndex("RequirementModelId");

                    b.HasIndex("StatusModelId");

                    b.HasIndex("TeamModelId1");

                    b.HasIndex("TypeModelId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.TeamModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.TicketModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedUserlId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ClosedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PriorityModelId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequirementModelId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusModelId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskModelId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamModelId")
                        .HasColumnType("integer");

                    b.Property<string>("TicketDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TypeModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("PriorityModelId");

                    b.HasIndex("ProjectModelId");

                    b.HasIndex("RequirementModelId");

                    b.HasIndex("StatusModelId");

                    b.HasIndex("TaskModelId");

                    b.HasIndex("TeamModelId");

                    b.HasIndex("TypeModelId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.TypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TicketType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.AlertModel", b =>
                {
                    b.HasOne("SoftwarePlannerUI.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.NoteModel", "Note")
                        .WithMany("Alerts")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.Navigation("CreatorModel");

                    b.Navigation("Note");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.ChangeModel", b =>
                {
                    b.HasOne("SoftwarePlannerUI.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.ProjectModel", null)
                        .WithMany("Changes")
                        .HasForeignKey("ProjectModelId");

                    b.HasOne("SoftwarePlannerUI.Models.RequirementModel", null)
                        .WithMany("Changes")
                        .HasForeignKey("RequirementModelId");

                    b.HasOne("SoftwarePlannerUI.Models.TaskModel", null)
                        .WithMany("Changes")
                        .HasForeignKey("TaskModelId");

                    b.HasOne("SoftwarePlannerUI.Models.TeamModel", null)
                        .WithMany("Changes")
                        .HasForeignKey("TeamModelId");

                    b.HasOne("SoftwarePlannerUI.Models.TicketModel", "TicketModel")
                        .WithMany()
                        .HasForeignKey("TicketModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorModel");

                    b.Navigation("TicketModel");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.CreatorModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModelId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.FileModel", b =>
                {
                    b.HasOne("SoftwarePlannerUI.Models.CreatorModel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.ProjectModel", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ProjectModelId");

                    b.HasOne("SoftwarePlannerUI.Models.RequirementModel", null)
                        .WithMany("Attachments")
                        .HasForeignKey("RequirementModelId");

                    b.HasOne("SoftwarePlannerUI.Models.TaskModel", null)
                        .WithMany("Attachments")
                        .HasForeignKey("TaskModelId");

                    b.HasOne("SoftwarePlannerUI.Models.TeamModel", null)
                        .WithMany("Attachments")
                        .HasForeignKey("TeamModelId");

                    b.HasOne("SoftwarePlannerUI.Models.TicketModel", null)
                        .WithMany("Attachments")
                        .HasForeignKey("TicketModelId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.NoteModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("SoftwarePlannerUI.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.PriorityModel", "PriorityModel")
                        .WithMany()
                        .HasForeignKey("PriorityModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.ProjectModel", "ProjectModel")
                        .WithMany("Notes")
                        .HasForeignKey("ProjectModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.RequirementModel", "RequirementModel")
                        .WithMany("Notes")
                        .HasForeignKey("RequirementModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.StatusModel", "StatusModel")
                        .WithMany()
                        .HasForeignKey("StatusModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.TaskModel", "TaskModel")
                        .WithMany("Notes")
                        .HasForeignKey("TaskModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.TeamModel", "TeamModel")
                        .WithMany("Notes")
                        .HasForeignKey("TeamModelId1");

                    b.HasOne("SoftwarePlannerUI.Models.TicketModel", "TicketModel")
                        .WithMany("Notes")
                        .HasForeignKey("TicketModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.TypeModel", "TypeModel")
                        .WithMany()
                        .HasForeignKey("TypeModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("CreatorModel");

                    b.Navigation("PriorityModel");

                    b.Navigation("ProjectModel");

                    b.Navigation("RequirementModel");

                    b.Navigation("StatusModel");

                    b.Navigation("TaskModel");

                    b.Navigation("TeamModel");

                    b.Navigation("TicketModel");

                    b.Navigation("TypeModel");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.ProjectModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("SoftwarePlannerUI.Models.ChangeModel", "ChangeModel")
                        .WithMany()
                        .HasForeignKey("ChangeModelId");

                    b.HasOne("SoftwarePlannerUI.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.FileModel", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.PriorityModel", "PriorityModel")
                        .WithMany()
                        .HasForeignKey("PriorityModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.StatusModel", "StatusModel")
                        .WithMany()
                        .HasForeignKey("StatusModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.TeamModel", "TeamModel")
                        .WithMany("Projects")
                        .HasForeignKey("TeamModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("ChangeModel");

                    b.Navigation("CreatorModel");

                    b.Navigation("Photo");

                    b.Navigation("PriorityModel");

                    b.Navigation("StatusModel");

                    b.Navigation("TeamModel");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.RequirementModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("SoftwarePlannerUI.Models.CreatorModel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.FileModel", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.PriorityModel", "PriorityModel")
                        .WithMany()
                        .HasForeignKey("PriorityModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.ProjectModel", null)
                        .WithMany("Requirements")
                        .HasForeignKey("ProjectModelId");

                    b.HasOne("SoftwarePlannerUI.Models.StatusModel", "StatusModel")
                        .WithMany()
                        .HasForeignKey("StatusModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.TeamModel", "TeamModel")
                        .WithMany("Requirements")
                        .HasForeignKey("TeamModelId1");

                    b.HasOne("SoftwarePlannerUI.Models.TypeModel", "TypeModel")
                        .WithMany()
                        .HasForeignKey("TypeModelId");

                    b.Navigation("AssignedUser");

                    b.Navigation("Creator");

                    b.Navigation("Photo");

                    b.Navigation("PriorityModel");

                    b.Navigation("StatusModel");

                    b.Navigation("TeamModel");

                    b.Navigation("TypeModel");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.TaskModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("SoftwarePlannerUI.Models.CreatorModel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.FileModel", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.PriorityModel", "PriorityModel")
                        .WithMany()
                        .HasForeignKey("PriorityModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.RequirementModel", null)
                        .WithMany("Tasks")
                        .HasForeignKey("RequirementModelId");

                    b.HasOne("SoftwarePlannerUI.Models.StatusModel", "StatusModel")
                        .WithMany()
                        .HasForeignKey("StatusModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.TeamModel", "TeamModel")
                        .WithMany("Tasks")
                        .HasForeignKey("TeamModelId1");

                    b.HasOne("SoftwarePlannerUI.Models.TypeModel", "TypeModel")
                        .WithMany()
                        .HasForeignKey("TypeModelId");

                    b.Navigation("AssignedUser");

                    b.Navigation("Creator");

                    b.Navigation("Photo");

                    b.Navigation("PriorityModel");

                    b.Navigation("StatusModel");

                    b.Navigation("TeamModel");

                    b.Navigation("TypeModel");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.TeamModel", b =>
                {
                    b.HasOne("SoftwarePlannerUI.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.FileModel", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorModel");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.TicketModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("SoftwarePlannerUI.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.PriorityModel", "PriorityModel")
                        .WithMany()
                        .HasForeignKey("PriorityModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.ProjectModel", "ProjectModel")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.RequirementModel", null)
                        .WithMany("Tickets")
                        .HasForeignKey("RequirementModelId");

                    b.HasOne("SoftwarePlannerUI.Models.StatusModel", "StatusModel")
                        .WithMany()
                        .HasForeignKey("StatusModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.TaskModel", "TaskModel")
                        .WithMany("Tickets")
                        .HasForeignKey("TaskModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.TeamModel", "TeamModel")
                        .WithMany("Tickets")
                        .HasForeignKey("TeamModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerUI.Models.TypeModel", "TypeModel")
                        .WithMany()
                        .HasForeignKey("TypeModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("CreatorModel");

                    b.Navigation("PriorityModel");

                    b.Navigation("ProjectModel");

                    b.Navigation("StatusModel");

                    b.Navigation("TaskModel");

                    b.Navigation("TeamModel");

                    b.Navigation("TypeModel");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.NoteModel", b =>
                {
                    b.Navigation("Alerts");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.ProjectModel", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Changes");

                    b.Navigation("Notes");

                    b.Navigation("Requirements");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.RequirementModel", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Changes");

                    b.Navigation("Notes");

                    b.Navigation("Tasks");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.TaskModel", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Changes");

                    b.Navigation("Notes");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.TeamModel", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Changes");

                    b.Navigation("Notes");

                    b.Navigation("Projects");

                    b.Navigation("Requirements");

                    b.Navigation("Tasks");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SoftwarePlannerUI.Models.TicketModel", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
