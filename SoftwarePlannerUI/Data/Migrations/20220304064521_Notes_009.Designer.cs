// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SoftwarePlannerUI.Data;

namespace SoftwarePlannerUI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220304064521_Notes_009")]
    partial class Notes_009
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProjectModelTeamModel", b =>
                {
                    b.Property<int>("ProjectModelsId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamModelsId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectModelsId", "TeamModelsId");

                    b.HasIndex("TeamModelsId");

                    b.ToTable("ProjectModelTeamModel");
                });

            modelBuilder.Entity("ProjectModelUserModel", b =>
                {
                    b.Property<int>("ProjectModelssId")
                        .HasColumnType("integer");

                    b.Property<string>("UserModelsId")
                        .HasColumnType("text");

                    b.HasKey("ProjectModelssId", "UserModelsId");

                    b.HasIndex("UserModelsId");

                    b.ToTable("ProjectModelUserModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.CreatorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("UserModelId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("CreatorModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateUploaded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("bytea");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<int?>("NoteModelId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequirementModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketModelId")
                        .HasColumnType("integer");

                    b.Property<string>("UserModelId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("NoteModelId");

                    b.HasIndex("ProjectModelId");

                    b.HasIndex("RequirementModelId");

                    b.HasIndex("TaskModelId");

                    b.HasIndex("TicketModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("FileModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.HistoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatorModelId")
                        .HasColumnType("text");

                    b.Property<int?>("CreatorModelId1")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentValue")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("NoteModelId")
                        .HasColumnType("integer");

                    b.Property<string>("PreviousValue")
                        .HasColumnType("text");

                    b.Property<int>("ProjectModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequirementModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketModelId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedItem")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId1");

                    b.HasIndex("NoteModelId");

                    b.HasIndex("ProjectModelId");

                    b.HasIndex("RequirementModelId");

                    b.HasIndex("TaskModelId");

                    b.HasIndex("TicketModelId");

                    b.ToTable("HistoryModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.NoteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateClosed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("HistoryModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("HistoryModelId");

                    b.HasIndex("TicketId");

                    b.ToTable("NoteModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.NotificationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("DateSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReciptientId")
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TeamModelId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReciptientId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TeamModelId");

                    b.HasIndex("TicketId");

                    b.ToTable("NotificationModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.ProjectModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatorModelId")
                        .HasColumnType("text");

                    b.Property<int?>("CreatorModelId1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId1");

                    b.ToTable("ProjectModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.RequirementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateClosed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HistoryModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectModelId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("HistoryModelId");

                    b.HasIndex("ProjectModelId");

                    b.ToTable("RequirementModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.TaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateClosed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HistoryModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("RequirementModelId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("HistoryModelId");

                    b.HasIndex("RequirementModelId");

                    b.ToTable("TaskModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.TeamModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId");

                    b.ToTable("TeamModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.TicketModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorModelId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateClosed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HistoryModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TaskModelId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorModelId");

                    b.HasIndex("HistoryModelId");

                    b.HasIndex("TaskModelId");

                    b.ToTable("TicketModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("NoteModelId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("RequirementModelId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("TeamModelId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("NoteModelId");

                    b.HasIndex("RequirementModelId");

                    b.HasIndex("TeamModelId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TaskModelUserModel", b =>
                {
                    b.Property<int>("TaskModelssId")
                        .HasColumnType("integer");

                    b.Property<string>("UserModelsId")
                        .HasColumnType("text");

                    b.HasKey("TaskModelssId", "UserModelsId");

                    b.HasIndex("UserModelsId");

                    b.ToTable("TaskModelUserModel");
                });

            modelBuilder.Entity("TicketModelUserModel", b =>
                {
                    b.Property<int>("TicketModelsId")
                        .HasColumnType("integer");

                    b.Property<string>("UserModelsId")
                        .HasColumnType("text");

                    b.HasKey("TicketModelsId", "UserModelsId");

                    b.HasIndex("UserModelsId");

                    b.ToTable("TicketModelUserModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectModelTeamModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.ProjectModel", null)
                        .WithMany()
                        .HasForeignKey("ProjectModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.TeamModel", null)
                        .WithMany()
                        .HasForeignKey("TeamModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectModelUserModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.ProjectModel", null)
                        .WithMany()
                        .HasForeignKey("ProjectModelssId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.CreatorModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModelId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.FileModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.NoteModel", null)
                        .WithMany("FileModels")
                        .HasForeignKey("NoteModelId");

                    b.HasOne("SoftwarePlannerLibrary.Models.ProjectModel", "ProjectModel")
                        .WithMany("FileAttachments")
                        .HasForeignKey("ProjectModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.RequirementModel", null)
                        .WithMany("FileModels")
                        .HasForeignKey("RequirementModelId");

                    b.HasOne("SoftwarePlannerLibrary.Models.TaskModel", null)
                        .WithMany("FileModels")
                        .HasForeignKey("TaskModelId");

                    b.HasOne("SoftwarePlannerLibrary.Models.TicketModel", null)
                        .WithMany("FileModels")
                        .HasForeignKey("TicketModelId");

                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "UserModel")
                        .WithMany("FileModels")
                        .HasForeignKey("UserModelId");

                    b.Navigation("CreatorModel");

                    b.Navigation("ProjectModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.HistoryModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId1");

                    b.HasOne("SoftwarePlannerLibrary.Models.NoteModel", null)
                        .WithMany("HistoryModels")
                        .HasForeignKey("NoteModelId");

                    b.HasOne("SoftwarePlannerLibrary.Models.ProjectModel", "ProjectModel")
                        .WithMany("HistoryModels")
                        .HasForeignKey("ProjectModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.RequirementModel", null)
                        .WithMany("HistoryModels")
                        .HasForeignKey("RequirementModelId");

                    b.HasOne("SoftwarePlannerLibrary.Models.TaskModel", null)
                        .WithMany("HistoryModels")
                        .HasForeignKey("TaskModelId");

                    b.HasOne("SoftwarePlannerLibrary.Models.TicketModel", null)
                        .WithMany("HistoryModels")
                        .HasForeignKey("TicketModelId");

                    b.Navigation("CreatorModel");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.NoteModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.HistoryModel", "HistoryModel")
                        .WithMany()
                        .HasForeignKey("HistoryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.TicketModel", "Ticket")
                        .WithMany("NoteModels")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorModel");

                    b.Navigation("HistoryModel");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.NotificationModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "Reciptient")
                        .WithMany()
                        .HasForeignKey("ReciptientId");

                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.TeamModel", null)
                        .WithMany("NotificationModels")
                        .HasForeignKey("TeamModelId");

                    b.HasOne("SoftwarePlannerLibrary.Models.TicketModel", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciptient");

                    b.Navigation("Sender");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.ProjectModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId1");

                    b.Navigation("CreatorModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.RequirementModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.HistoryModel", "HistoryModel")
                        .WithMany()
                        .HasForeignKey("HistoryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.ProjectModel", "ProjectModel")
                        .WithMany("RequirementModels")
                        .HasForeignKey("ProjectModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorModel");

                    b.Navigation("HistoryModel");

                    b.Navigation("ProjectModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.TaskModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.HistoryModel", "HistoryModel")
                        .WithMany()
                        .HasForeignKey("HistoryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.RequirementModel", "RequirementModel")
                        .WithMany("TaskModels")
                        .HasForeignKey("RequirementModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorModel");

                    b.Navigation("HistoryModel");

                    b.Navigation("RequirementModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.TeamModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.TicketModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.CreatorModel", "CreatorModel")
                        .WithMany()
                        .HasForeignKey("CreatorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.HistoryModel", "HistoryModel")
                        .WithMany()
                        .HasForeignKey("HistoryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.TaskModel", "TaskModel")
                        .WithMany("Tickets")
                        .HasForeignKey("TaskModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorModel");

                    b.Navigation("HistoryModel");

                    b.Navigation("TaskModel");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.UserModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.NoteModel", null)
                        .WithMany("UserModels")
                        .HasForeignKey("NoteModelId");

                    b.HasOne("SoftwarePlannerLibrary.Models.RequirementModel", null)
                        .WithMany("UserModels")
                        .HasForeignKey("RequirementModelId");

                    b.HasOne("SoftwarePlannerLibrary.Models.TeamModel", "TeamModel")
                        .WithMany("UserModels")
                        .HasForeignKey("TeamModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamModel");
                });

            modelBuilder.Entity("TaskModelUserModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.TaskModel", null)
                        .WithMany()
                        .HasForeignKey("TaskModelssId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketModelUserModel", b =>
                {
                    b.HasOne("SoftwarePlannerLibrary.Models.TicketModel", null)
                        .WithMany()
                        .HasForeignKey("TicketModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftwarePlannerLibrary.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.NoteModel", b =>
                {
                    b.Navigation("FileModels");

                    b.Navigation("HistoryModels");

                    b.Navigation("UserModels");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.ProjectModel", b =>
                {
                    b.Navigation("FileAttachments");

                    b.Navigation("HistoryModels");

                    b.Navigation("RequirementModels");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.RequirementModel", b =>
                {
                    b.Navigation("FileModels");

                    b.Navigation("HistoryModels");

                    b.Navigation("TaskModels");

                    b.Navigation("UserModels");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.TaskModel", b =>
                {
                    b.Navigation("FileModels");

                    b.Navigation("HistoryModels");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.TeamModel", b =>
                {
                    b.Navigation("NotificationModels");

                    b.Navigation("UserModels");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.TicketModel", b =>
                {
                    b.Navigation("FileModels");

                    b.Navigation("HistoryModels");

                    b.Navigation("NoteModels");
                });

            modelBuilder.Entity("SoftwarePlannerLibrary.Models.UserModel", b =>
                {
                    b.Navigation("FileModels");
                });
#pragma warning restore 612, 618
        }
    }
}
